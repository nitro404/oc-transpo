"use strict";var changeCase=require("change-case"),utilities=require("extra-utilities"),envelope=require("node-envelope"),transit={},apiAddress="http://api.octranspo1.com/v1.2",apiKey=null,appID=null,errorCodes={1:"Invalid API key",2:"Unable to query data source",10:"Invalid stop number",11:"Invalid route number",12:"Stop does not service route"};function formatError(error){var formattedError={},errorCode=utilities.parseInteger(error);isNaN(errorCode)||(formattedError.code=errorCode);var message=errorCodes[errorCode];return utilities.isValid(message)?formattedError.message=message:formattedError.message="Unknown error code: "+errorCode,formattedError}function parseTime(value){if(utilities.isEmptyString(value))return null;var timeData=value.match(/^[ \t]*([0-9]{1,2}):?([0-5][0-9])[ \t]*$/);if(!timeData||3!==timeData.length)return null;var hour=utilities.parseInteger(timeData[1]);if(isNaN(hour)||hour<0)return null;var fixedHour=hour%24;return utilities.parseTime((fixedHour<10?"0":"")+fixedHour+":"+timeData[2])}function parseTimeElapsed(timeElapsed){var formattedTimeElapsed=utilities.parseFloatingPointNumber(timeElapsed);return isNaN(formattedTimeElapsed)?NaN:formattedTimeElapsed<0?-1:Math.floor(6e4*formattedTimeElapsed)}function parseBusType(type,includeRaw){if(utilities.isEmptyString(type))return null;var formattedData={bikeRack:!!type.match(/b/gi),lowFloorEasyAccess:!!type.match(/[^d][ela]{1,3}[^h]/gi),doubleDecker:!!type.match(/d{2}/gi),dieselElectricHybrid:!!type.match(/deh/gi),inviro:!!type.match(/in/gi),orion:!!type.match(/on/gi)},lengthData=type.match(/([46])0?/);if(utilities.isNonEmptyArray(lengthData)&&2<=lengthData.length){var value=utilities.parseInteger(lengthData[1]);4===value?formattedData.busLength=40:6===value?formattedData.busLength=60:console.error("Unexpected bus length value: "+value+' - from type: "'+type+'".')}return formattedData.doubleDecker?formattedData.type="Double Decker":formattedData.dieselElectricHybrid?formattedData.type="Diesel Electric Hybrid":formattedData.inviro?formattedData.type="Inviro":formattedData.orion?formattedData.type="Orion":60===formattedData.busLength?formattedData.type="Stretch":formattedData.type="Regular",includeRaw&&(formattedData.raw=type),formattedData}transit.setup=function(options){var formattedOptions=utilities.formatObject(options,{key:{type:"string",trim:!0,nonEmpty:!0,nullable:!1,required:!0},appID:{type:"string",trim:!0,nonEmpty:!0,nullable:!1,required:!0}},{throwErrors:!0,removeExtra:!0});apiKey=formattedOptions.key,appID=formattedOptions.appID},transit.getRouteDirectionIdentifiers=function(stop,routes,options,callback){if(utilities.isFunction(options)&&(callback=options,options=null),!utilities.isFunction(callback))throw new Error("Missing or invalid callback function!");if(!utilities.isObject(routes))return callback(new Error("Invalid routes parameter type - expected object or array."));var formattedOptions=utilities.formatObject(options,{insert:{type:"boolean",default:!0},overwrite:{type:"boolean",default:!0}},!0);return transit.getStopSummary(stop,function(error,stopSummary){if(error)return callback(error);if(utilities.isEmptyArray(stopSummary.routes))return callback(new Error("Stop number "+stop+" has no routes."));var routeList=null,route=null,routeSummary=null,formattedDirectionName=null,hasRoute=null,hasRouteWithDirection=null,results=[];routeList=Array.isArray(routes)?routes:[routes];for(var i=0;i<routeList.length;i++)if(route=routeList[i],!utilities.isEmptyObject(route)){if(hasRouteWithDirection=hasRoute=!1,!utilities.isObject(route.direction))return callback(new Error("Route has missing or invalid direction attribute - expected object."));if("string"!=typeof route.direction.name)return callback(new Error("Invalid direction name type: "+typeof directionName+" - expected string!"));if(formattedDirectionName=route.direction.name.toLowerCase().trim(),utilities.isEmptyString(formattedDirectionName))return callback(new Error("Direction name cannot be empty!"));for(var j=0;j<stopSummary.routes.length;j++)if((routeSummary=stopSummary.routes[j]).route===route.route&&(hasRoute=!0,routeSummary.direction.name.toLowerCase()===formattedDirectionName)){hasRouteWithDirection=!0,formattedOptions.insert&&(!utilities.isValid(route.direction.id)||utilities.isValid(route.direction.id)&&formattedOptions.overwrite)&&(route.direction.id=routeSummary.direction.id),results.push(routeSummary.direction.id);break}if(!hasRouteWithDirection){var message=null;return message=hasRoute?"Stop number "+stop+" has route with number "+route+", but not direction "+route.direction.name+".":"Stop number "+stop+" has no route with number "+route+".",callback(new Error(message))}}return Array.isArray(routes)?callback(null,results):callback(null,results[0])})},transit.getStopSummary=function(stop,options,callback){if(utilities.isFunction(options)&&(callback=options,options=null),!utilities.isFunction(callback))throw new Error("Missing or invalid callback function.");if(utilities.isEmptyString(apiKey))return callback(new Error("Missing OC Transpo API key."));if(utilities.isEmptyString(appID))return callback(new Error("Missing OC Transpo application identifier."));if(!Number.isInteger(stop))return callback(new Error("Missing or invalid stop number: "+stop+" - expected integer."));var formattedOptions=utilities.formatObject(options,{includeRaw:{type:"boolean",default:!1}},!0);return envelope.get("GetRouteSummaryForStop",{apiKey:apiKey,appID:appID,format:"json",stopNo:stop},{baseUrl:apiAddress},function(error,result){if(error)return callback(error);if(!utilities.isObject(result))return callback(new Error("Invalid server response for GetRouteSummaryForStop."));var data=result.GetRouteSummaryForStopResult;if(utilities.isNonEmptyString(data.Error)){var formattedError=formatError(data.Error);error=new Error(formattedError.message);return utilities.isValid(formattedError.code)&&(error.code=formattedError.code),callback(error)}var formattedData={stop:utilities.parseInteger(data.StopNo),description:changeCase.title(data.StopDescription)},routes=null,route=null,formattedRoute=null;if(utilities.isValid(data.Routes)){formattedData.routes=[],utilities.isValid(data.Routes.Route)?routes=utilities.isNonEmptyArray(data.Routes.Route)?data.Routes.Route:[data.Routes.Route]:utilities.isValid(data.Routes)&&(routes=utilities.isNonEmptyArray(data.Routes)?data.Routes:[data.Routes]);for(var i=0;i<routes.length;i++)route=routes[i],utilities.isEmptyObject(route)||(formattedRoute={route:utilities.parseInteger(route.RouteNo),direction:{id:utilities.parseInteger(route.DirectionID),name:route.Direction},heading:route.RouteHeading},formattedData.routes.push(formattedRoute))}return formattedOptions.includeRaw&&(formattedData.raw=result),callback(null,formattedData)})},transit.getRouteInformation=function(stop,route,options,callback){if(utilities.isFunction(options)&&(callback=options,options=null),!utilities.isFunction(callback))throw new Error("Missing or invalid callback function.");if(utilities.isEmptyString(apiKey))return callback(new Error("Missing OC Transpo API key."));if(utilities.isEmptyString(appID))return callback(new Error("Missing OC Transpo application identifier."));if(!Number.isInteger(stop))return callback(new Error("Missing or invalid stop number: "+stop+" - expected integer."));if(!Number.isInteger(route))return callback(new Error("Missing or invalid route number: "+route+" - expected integer."));var formattedOptions=utilities.formatObject(options,{includeRaw:{type:"boolean",default:!1}},!0);return envelope.get("GetNextTripsForStop",{apiKey:apiKey,appID:appID,format:"json",stopNo:stop,routeNo:route},{baseUrl:apiAddress},function(error,result){if(error)return callback(error);if(!utilities.isObject(result))return callback(new Error("Invalid server response for GetNextTripsForStop."));var data=result.GetNextTripsForStopResult;if(utilities.isNonEmptyString(data.Error)){var formattedError=formatError(data.Error);error=new Error(formattedError.message);return utilities.isValid(formattedError.code)&&(error.code=formattedError.code),callback(error)}var formattedData={stop:utilities.parseInteger(data.StopNo)};utilities.isValid(data.StopDescription)&&(formattedData.description=changeCase.title(data.StopDescription)),utilities.isValid(data.StopLabel)&&(formattedData.description=changeCase.title(data.StopLabel));var routes=null,route=null,trips=null,trip=null,bus=null,formattedRoute=null,formattedTrip=null;utilities.isValid(data.Route)&&(formattedData.routes=[],routes=utilities.isValid(data.Route.RouteDirection)?utilities.isNonEmptyArray(data.Route.RouteDirection)?data.Route.RouteDirection:[data.Route.RouteDirection]:utilities.isNonEmptyArray(data.Route)?data.Route:[data.Route]);for(var i=0;i<routes.length;i++)if(route=routes[i],!utilities.isEmptyObject(route)){if(formattedRoute={route:utilities.parseInteger(route.RouteNo),direction:{name:route.Direction}},utilities.isValid(route.RouteHeading)&&(formattedRoute.heading=route.RouteHeading),utilities.isValid(route.RouteLabel)&&(formattedRoute.heading=route.RouteLabel),utilities.isValid(route.DirectionID)&&(formattedRoute.direction.id=utilities.parseInteger(route.DirectionID)),utilities.isValid(route.Trips)){formattedRoute.trips=[],utilities.isValid(route.Trips.Trip)?trips=utilities.isNonEmptyArray(route.Trips.Trip)?route.Trips.Trip:[route.Trips.Trip]:utilities.isValid(route.Trips)&&(trips=utilities.isNonEmptyArray(route.Trips)?route.Trips:[route.Trips]);for(var j=0;j<trips.length;j++)if(trip=trips[j],!utilities.isEmptyObject(trip)){formattedTrip={destination:trip.TripDestination,arrivalTime:utilities.parseInteger(trip.AdjustedScheduleTime),lastUpdated:parseTimeElapsed(trip.AdjustmentAge),lastTrip:utilities.parseBoolean(trip.LastTripOfSchedule)};try{formattedTrip.startTime=parseTime(trip.TripStartTime)}catch(error){console.error(error)}bus=parseBusType(trip.BusType,formattedOptions.includeRaw),utilities.isValid(bus)&&(formattedTrip.bus=bus),0<=formattedTrip.lastUpdated&&(formattedTrip.gps={latitude:utilities.parseFloatingPointNumber(trip.Latitude),longitude:utilities.parseFloatingPointNumber(trip.Longitude),speed:utilities.parseFloatingPointNumber(trip.GPSSpeed)}),formattedRoute.trips.push(formattedTrip)}}formattedData.routes.push(formattedRoute)}return formattedOptions.includeRaw&&(formattedData.raw=result),transit.getRouteDirectionIdentifiers(formattedData.stop,formattedData.routes,function(error,directionIdentifiers){return error?callback(error):callback(null,formattedData)})})},transit.getStopInformation=function(stop,options,callback){if(utilities.isFunction(options)&&(callback=options,options=null),!utilities.isFunction(callback))throw new Error("Missing or invalid callback function!");if(utilities.isEmptyString(apiKey))return callback(new Error("Missing OC Transpo API key."));if(utilities.isEmptyString(appID))return callback(new Error("Missing OC Transpo application identifier."));if(!Number.isInteger(stop))return callback(new Error("Missing or invalid stop number: "+stop+" - expected integer."));var formattedOptions=utilities.formatObject(options,{includeRaw:{type:"boolean",default:!1}},!0);return envelope.get("GetNextTripsForStopAllRoutes",{apiKey:apiKey,appID:appID,format:"json",stopNo:stop},{baseUrl:apiAddress},function(error,result){if(error)return callback(error);if(!utilities.isObject(result))return callback(new Error("Invalid server response for GetNextTripsForStopAllRoutes."));var data=result.GetRouteSummaryForStopResult;if(utilities.isNonEmptyString(data.Error)){var formattedError=formatError(data.Error);error=new Error(formattedError.message);return utilities.isValid(formattedError.code)&&(error.code=formattedError.code),callback(error)}var formattedData={stop:utilities.parseInteger(data.StopNo)};utilities.isValid(data.StopDescription)&&(formattedData.description=changeCase.title(data.StopDescription)),utilities.isValid(data.StopLabel)&&(formattedData.description=changeCase.title(data.StopLabel));var routes=null,route=null,trips=null,trip=null,bus=null,formattedRoute=null,formattedTrip=null;if(utilities.isValid(data.Routes)){formattedData.routes=[],utilities.isValid(data.Routes.Route)?routes=utilities.isNonEmptyArray(data.Routes.Route)?data.Routes.Route:[data.Routes.Route]:utilities.isValid(data.Routes)&&(routes=utilities.isNonEmptyArray(data.Routes)?data.Routes:[data.Routes]);for(var i=0;i<routes.length;i++)if(route=routes[i],!utilities.isEmptyObject(route)){if(formattedRoute={route:utilities.parseInteger(route.RouteNo),direction:{name:route.Direction}},utilities.isValid(route.RouteHeading)&&(formattedRoute.heading=route.RouteHeading),utilities.isValid(route.RouteLabel)&&(formattedRoute.heading=route.RouteLabel),utilities.isValid(route.DirectionID)&&(formattedRoute.direction.id=utilities.parseInteger(route.DirectionID)),utilities.isValid(route.Trips)){formattedRoute.trips=[],utilities.isValid(route.Trips.Trip)?trips=utilities.isNonEmptyArray(route.Trips.Trip)?route.Trips.Trip:[route.Trips.Trip]:utilities.isValid(route.Trips)&&(trips=utilities.isNonEmptyArray(route.Trips)?route.Trips:[route.Trips]);for(var j=0;j<trips.length;j++)if(trip=trips[j],!utilities.isEmptyObject(trip)){formattedTrip={destination:trip.TripDestination,arrivalTime:utilities.parseInteger(trip.AdjustedScheduleTime),lastUpdated:parseTimeElapsed(trip.AdjustmentAge),lastTrip:utilities.parseBoolean(trip.LastTripOfSchedule)};try{formattedTrip.startTime=parseTime(trip.TripStartTime)}catch(error){console.error(error)}bus=parseBusType(trip.BusType,formattedOptions.includeRaw),utilities.isValid(bus)&&(formattedTrip.bus=bus),0<=formattedTrip.lastUpdated&&(formattedTrip.gps={latitude:utilities.parseFloatingPointNumber(trip.Latitude),longitude:utilities.parseFloatingPointNumber(trip.Longitude),speed:utilities.parseFloatingPointNumber(trip.GPSSpeed)}),formattedRoute.trips.push(formattedTrip)}}formattedData.routes.push(formattedRoute)}}return formattedOptions.includeRaw&&(formattedData.raw=result),callback(null,formattedData)})},module.exports=transit;